{"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Introduction","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Clustering","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Lifecycle","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSingleton","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Security","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Observability"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Receptionist","level":2,"type":"heading","text":"Receptionist"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Discovering actors is an important aspect of distributed programming, as it is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"the"}]},{"type":"text","text":" primary way we can discover actors on other nodes,"},{"type":"text","text":" "},{"type":"text","text":"and communicate with them."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Distributed actors are not automatically advertised in the cluster, and must opt-in into discovery by checking-in with the system’s local"},{"type":"text","text":" "},{"type":"text","text":"receptionist. This is because not all distributed actors need to necessarily be discovered by "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" other node in the cluster."},{"type":"text","text":" "},{"type":"text","text":"Some distributed actors may only be handed out after authenticating who is trying to access them (and then still, they may perform"},{"type":"text","text":" "},{"type":"text","text":"additional authentication for specific remote calls)."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The receptionist pattern is called “receptionist”, because similar to a hotel, actors need to check-in at it in"},{"type":"text","text":" "},{"type":"text","text":"order to let others know they are available to meet now."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking-in with the receptionist is performed by calling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/DistributedReceptionist\/checkIn(_:with:)"},{"type":"text","text":" and passing a"},{"type":"text","text":" "},{"type":"text","text":"specific key; The key is useful for when the same types of actor, may want to perform different roles. For example, you may"},{"type":"text","text":" "},{"type":"text","text":"have the same type of actor serve requests for different “teams”, and use the reception keys to identify"}]},{"type":"codeListing","syntax":"swift","code":["import DistributedCluster","","distributed actor Worker {","    typealias ActorSystem = ClusterSystem","    ","    distributed func work() { \/* ... *\/ }","}","","extension DistributedReception.Key {","    static var workers: DistributedReception.Key<Worker> {","        \"workers\"","    }","}"]},{"type":"codeListing","syntax":"swift","code":["let system = await ClusterSystem(\"ReceptionistExamples\")","let worker = Worker(actorSystem: system)"]},{"type":"codeListing","syntax":"swift","code":["await system.receptionist.checkIn(worker, with: .workers) "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The receptionist automatically watches checked-in actors, and removes them from the listing once they have been terminated."},{"type":"text","text":" "},{"type":"text","text":"Other actors which discover the actor, and want to be informed once the actor has terminated, should use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Lifecycle"},{"type":"text","text":" APIs."}]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DistributedReception.Key"},{"type":"text","text":"s are likely to be collapsed with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSystem\/ActorID\/Metadata-swift.struct"},{"type":"text","text":" during the beta releases."},{"type":"text","text":" "},{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-distributed-actors\/issues\/950"}]}],"type":"aside","name":"Warning"},{"anchor":"Receptionist-Listings","level":3,"type":"heading","text":"Receptionist: Listings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The opposite of using a receptionist is obtaining a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/DistributedReceptionist\/listing(of:file:line:)"},{"type":"text","text":" of actors registered with a specific key."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since keys are well typed, the obtained actors are also well typed, and this is how we can obtain a stream of workers which are checked in already, or are checking in with the receptionist as the stream continues:"}]},{"type":"codeListing","syntax":"swift","code":["for await worker in await system.receptionist.listing(of: .workers) {","    try await worker.work() \/\/ message or store discovered workers","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typical pattern to use with listings is to create an unstructured task (using "},{"type":"codeVoice","code":"Task { ... }"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and store it inside an actor that will be responsible for interacting with the discovered actors."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once that actor is deinitialized, that task should be cancelled as well, which we can do in its "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":", like this:"}]},{"type":"codeListing","syntax":"swift","code":["distributed actor Boss: LifecycleWatch { ","    var workers: WeakActorDictionary<Worker> = [:]","    ","    var listingTask: Task<Void, Never>?","    ","    func findWorkers() async {","        guard listingTask == nil else {","            actorSystem.log.info(\"Already looking for workers\")","            return","        }","","        listingTask = Task {","            for await worker in await actorSystem.receptionist.listing(of: .workers) {","                workers.insert(worker)","            }","        }","    }","","    func terminated(actor id: ActorID) async {","        workers.removeActor(identifiedBy: id)","    }","    ","    deinit {","        listingTask?.cancel()","    }","}"]},{"anchor":"Checking-out-from-receptionist-listings","level":3,"type":"heading","text":"Checking-out from receptionist listings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking out of the receptionist is performed automatically when a previously checked-in actor is terminated,"},{"type":"text","text":" "},{"type":"text","text":"be it by the node that it was located on terminating, or the actor itself being deallocated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is no explicit API for checking out an actor. The receptionist should not be used to aggressively add and remove the same actor, but instead publish actors which are supposed to be well known and relatively stable contact points. For aggressively added\/removed actors, it is recommended to handle this on the application level, by one well known actor managing the handing out of references. This way it also is possible to more tightly check where and how actor references are handed out."}]}]}],"variants":[{"paths":["\/documentation\/distributedcluster\/receptionist"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Discovering actors is an important aspect of distributed programming, as it is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"the"}]},{"type":"text","text":" primary way we can discover actors on other nodes,"},{"type":"text","text":" "},{"type":"text","text":"and communicate with them."}],"kind":"article","metadata":{"modules":[{"name":"DistributedCluster"}],"role":"article","title":"Receptionist"},"hierarchy":{"paths":[["doc:\/\/DistributedCluster\/documentation\/DistributedCluster"]]},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Lookup","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Register","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Subscribe"]},{"title":"Type Aliases","identifiers":["doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Message"]}],"references":{"doc://DistributedCluster/documentation/DistributedCluster":{"role":"collection","title":"DistributedCluster","abstract":[{"type":"text","text":"A peer-to-peer cluster actor system implementation for Swift."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster"},"doc://DistributedCluster/documentation/DistributedCluster/Receptionist/Lookup":{"role":"symbol","title":"Receptionist.Lookup","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Lookup"}],"abstract":[{"type":"text","text":"INTERNAL API"},{"type":"text","text":" "},{"type":"text","text":"Used to lookup "},{"type":"codeVoice","code":"_ActorRef"},{"type":"text","text":"s for the given "},{"type":"codeVoice","code":"_Reception.Key"}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Lookup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Lookup"}],"url":"\/documentation\/distributedcluster\/receptionist\/lookup"},"doc://DistributedCluster/documentation/DistributedCluster/DistributedReceptionist/checkIn(_:with:)":{"role":"symbol","title":"checkIn(_:with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"checkIn"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Guest"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Guest"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DistributedReception","preciseIdentifier":"s:18DistributedCluster0A9ReceptionO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Key","preciseIdentifier":"s:18DistributedCluster0A9ReceptionO3KeyV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Guest"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Registers passed in distributed actor in the systems receptionist with given id."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/DistributedReceptionist\/checkIn(_:with:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/distributedcluster\/distributedreceptionist\/checkin(_:with:)"},"doc://DistributedCluster/documentation/DistributedCluster/Security":{"role":"article","title":"Security","abstract":[{"type":"text","text":"Configuring security aspects of your cluster system."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Security","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/security"},"doc://DistributedCluster/documentation/DistributedCluster/Introduction":{"role":"article","title":"Introducing Distributed Actors","abstract":[{"type":"text","text":"A high-level introduction to distributed actor systems."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Introduction","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/introduction"},"doc://DistributedCluster/documentation/DistributedCluster/ClusterSingleton":{"role":"symbol","title":"ClusterSingleton","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClusterSingleton"}],"abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"cluster singleton"}]},{"type":"text","text":" is a conceptual distributed actor that is guaranteed to have at-most one"},{"type":"text","text":" "},{"type":"text","text":"instance within the cluster system among all of its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Cluster\/MemberStatus\/up"},{"type":"text","text":" members."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSingleton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ClusterSingleton"}],"url":"\/documentation\/distributedcluster\/clustersingleton"},"doc://DistributedCluster/documentation/DistributedCluster/Cluster/MemberStatus/up":{"role":"symbol","title":"Cluster.MemberStatus.up","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"up"}],"abstract":[{"type":"text","text":"Describes a node which at some point was known to the leader and moved to "},{"type":"codeVoice","code":".up"},{"type":"text","text":" "},{"type":"text","text":"by whichever strategy it implements for this. Generally, up members are fully ready"},{"type":"text","text":" "},{"type":"text","text":"members of the cluster and are most likely known to many if not all other nodes in the cluster."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Cluster\/MemberStatus\/up","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster\/cluster\/memberstatus\/up"},"https://github.com/apple/swift-distributed-actors/issues/950":{"title":"Make use of ActorTag rather than separate keys infra for reception #950","titleInlineContent":[{"type":"text","text":"Make use of ActorTag rather than separate keys infra for reception #950"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-distributed-actors\/issues\/950","url":"https:\/\/github.com\/apple\/swift-distributed-actors\/issues\/950"},"doc://DistributedCluster/documentation/DistributedCluster/Observability":{"role":"article","title":"Observability","abstract":[{"type":"text","text":"The cluster system offers a number of built-in observability capabilities about the state of the cluster, as well as distributed actors it manages."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Observability","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/observability"},"doc://DistributedCluster/documentation/DistributedCluster/Lifecycle":{"role":"article","title":"Lifecycle Monitoring","abstract":[{"type":"text","text":"Monitoring distributed actor lifecycles regardless of their location."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Lifecycle","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/lifecycle"},"doc://DistributedCluster/documentation/DistributedCluster/Receptionist/Register":{"role":"symbol","title":"Receptionist.Register","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Register"}],"abstract":[{"type":"text","text":"INTERNAL API"},{"type":"text","text":" "},{"type":"text","text":"When sent to receptionist will register the specified "},{"type":"codeVoice","code":"_ActorRef"},{"type":"text","text":" under the given "},{"type":"codeVoice","code":"_Reception.Key"}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Register","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Register"}],"url":"\/documentation\/distributedcluster\/receptionist\/register"},"doc://DistributedCluster/documentation/DistributedCluster/ClusterSystem/ActorID/Metadata-swift.struct":{"role":"symbol","title":"ClusterSystem.ActorID.Metadata","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Metadata"}],"abstract":[],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSystem\/ActorID\/Metadata-swift.struct","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Metadata"}],"url":"\/documentation\/distributedcluster\/clustersystem\/actorid\/metadata-swift.struct"},"doc://DistributedCluster/documentation/DistributedCluster/Receptionist/Message":{"role":"symbol","title":"Receptionist.Message","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Message"}],"abstract":[],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Message","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Message"}],"url":"\/documentation\/distributedcluster\/receptionist\/message"},"doc://DistributedCluster/documentation/DistributedCluster/Receptionist/Subscribe":{"role":"symbol","title":"Receptionist.Subscribe","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Subscribe"}],"abstract":[{"type":"text","text":"INTERNAL API"},{"type":"text","text":" "},{"type":"text","text":"Subscribe to periodic updates of the specified key"}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist\/Subscribe","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Subscribe"}],"url":"\/documentation\/distributedcluster\/receptionist\/subscribe"},"doc://DistributedCluster/documentation/DistributedCluster/Clustering":{"role":"article","title":"Clustering","abstract":[{"type":"text","text":"Clustering multiple actor system instances into a single Distributed Actor System."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Clustering","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/clustering"},"doc://DistributedCluster/documentation/DistributedCluster/DistributedReceptionist/listing(of:file:line:)":{"role":"symbol","title":"listing(of:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"listing"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Guest"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DistributedReception","preciseIdentifier":"s:18DistributedCluster0A9ReceptionO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Key","preciseIdentifier":"s:18DistributedCluster0A9ReceptionO3KeyV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Guest"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"DistributedReception","preciseIdentifier":"s:18DistributedCluster0A9ReceptionO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"GuestListing","preciseIdentifier":"s:18DistributedCluster0A9ReceptionO12GuestListingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Guest"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a “listing” asynchronous sequence which will emit actor references,"},{"type":"text","text":" "},{"type":"text","text":"for every distributed actor that the receptionist discovers for the specific key."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/DistributedReceptionist\/listing(of:file:line:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/distributedcluster\/distributedreceptionist\/listing(of:file:line:)"}}}