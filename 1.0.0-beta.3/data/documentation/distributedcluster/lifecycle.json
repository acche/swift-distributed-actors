{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Monitoring distributed actor lifecycles enables you to react to their termination, regardless if they are hosted on the same, or on a remote host."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is crucial for building robust actor systems which are able to automatically remote e.g. remote worker references as they are confirmed to have terminated."},{"type":"text","text":" "},{"type":"text","text":"This can happen if the remote actor is just deinitialized, or if the remote host is determined to be "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Cluster\/MemberStatus\/down"},{"type":"text","text":"."}]},{"anchor":"Lifecycle-Watch","level":2,"type":"heading","text":"Lifecycle Watch"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A distributed actor is able to monitor other distributed actors by making use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a feature of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSystem"},{"type":"text","text":" which allows us to monitor other actors, regardless of their location, in the cluster for termination."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, we can re-create the classic theater moment of Romeo and Juliet watching eachother, and acting as they realize the other (actor) has terminated:"}]},{"type":"codeListing","syntax":"swift","code":["distributed actor Romeo: LifecycleWatch {","    deinit {","        print(\"\\(Self.self) terminated!\")","    }","","    distributed func watch(_ juliet: Juliet) {","        watchTermination(of: juliet)","    }","    ","    func terminated(actor id: ActorID) async {","        print(\"Oh no! \\(id) is dead!\")","        \/\/ *Drinks poison*","    }","}","","distributed actor Juliet: LifecycleWatch {","    deinit {","        print(\"\\(Self.self) terminated!\")","    }","","    distributed func watch(_ romeo: Romeo) {","        watchTermination(of: romeo)","    }","","    func terminated(actor id: ActorID) async {","        print(\"Oh no! \\(id) is dead!\")","        \/\/ *Stabs through heart*","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch\/watchTermination(of:file:line:)"},{"type":"text","text":" API purposefully does not use async\/await because that would cause "},{"type":"codeVoice","code":"romeo"},{"type":"text","text":" to be retained as this function suspends. Instead, we allow it, and the function calling it (which keeps a reference to "},{"type":"codeVoice","code":"Romeo"},{"type":"text","text":"), to complete and once the romeo actor is determined terminated, we get called back with its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ActorID"},{"type":"text","text":" in the separate "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch\/terminated(actor:)"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This API offers the same semantics, regardless where the actors are located, and always triggers the termination closure as the watched actor is considered to have terminated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In case the watched actor is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"local"}]},{"type":"text","text":", it’s termination is tied to Swift’s ref-counting mechanisms, and an actor is terminated as soon as there are no more strong references to it in a system. It then is deinitialized, and the actor system’s "},{"type":"codeVoice","code":"resignID(actor.id)"},{"type":"text","text":" is triggered, causing propagation to all the other actors which have been watching that actor."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch\/unwatchTermination(of:file:line:)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In case the watched actor is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"remote"}]},{"type":"text","text":", termination may happen because of two reasons:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"either its reference count "},{"type":"emphasis","inlineContent":[{"type":"text","text":"on the remote system"}]},{"type":"text","text":" dropped to zero and it followed the same deinitialization steps as just described in the local case;"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"or, the entire node the distributed actor was located on has been declared "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Cluster\/MemberStatus\/down"},{"type":"text","text":" and therefore the actor is assumed terminated (regardless if it really has deinitialized or not)."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second remote case is illustrated by the following diagram:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"remote_watch_terminated.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This remote watch mechanism is how most of the cluster systems’ dynamic balancing and sharding mechanisms are implemented."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lifecycle watch “terminated” messages are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"guaranteed"}]},{"type":"text","text":" to be delivered and processed by remote peers, even in face of message-loss. The cluster system takes re-delivery steps for such important system messages, such that one can rely on termination to always be delivered reliably."}]}],"type":"aside","name":"Tip"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/distributedcluster\/lifecycle"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Lifecycle","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Monitoring distributed actor lifecycles regardless of their location."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Lifecycle Monitoring","role":"article","modules":[{"name":"DistributedCluster"}]},"hierarchy":{"paths":[["doc:\/\/DistributedCluster\/documentation\/DistributedCluster"]]},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Introduction","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Clustering","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSingleton","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Security","doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Observability"],"generated":true}],"references":{"doc://DistributedCluster/documentation/DistributedCluster/ActorID":{"role":"symbol","title":"ActorID","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorID"}],"abstract":[{"type":"text","text":"Convenience alias for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSystem\/ActorID"},{"type":"text","text":"."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ActorID","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActorID"}],"url":"\/documentation\/distributedcluster\/actorid"},"doc://DistributedCluster/documentation/DistributedCluster/Cluster/MemberStatus/up":{"role":"symbol","title":"Cluster.MemberStatus.up","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"up"}],"abstract":[{"type":"text","text":"Describes a node which at some point was known to the leader and moved to "},{"type":"codeVoice","code":".up"},{"type":"text","text":" "},{"type":"text","text":"by whichever strategy it implements for this. Generally, up members are fully ready"},{"type":"text","text":" "},{"type":"text","text":"members of the cluster and are most likely known to many if not all other nodes in the cluster."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Cluster\/MemberStatus\/up","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster\/cluster\/memberstatus\/up"},"doc://DistributedCluster/documentation/DistributedCluster/Receptionist":{"role":"article","title":"Receptionist","abstract":[{"type":"text","text":"Discovering actors is an important aspect of distributed programming, as it is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"the"}]},{"type":"text","text":" primary way we can discover actors on other nodes,"},{"type":"text","text":" "},{"type":"text","text":"and communicate with them."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Receptionist","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/receptionist"},"doc://DistributedCluster/documentation/DistributedCluster/Observability":{"role":"article","title":"Observability","abstract":[{"type":"text","text":"The cluster system offers a number of built-in observability capabilities about the state of the cluster, as well as distributed actors it manages."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Observability","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/observability"},"doc://DistributedCluster/documentation/DistributedCluster":{"role":"collection","title":"DistributedCluster","abstract":[{"type":"text","text":"A peer-to-peer cluster actor system implementation for Swift."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster"},"doc://DistributedCluster/documentation/DistributedCluster/LifecycleWatch/unwatchTermination(of:file:line:)":{"role":"symbol","title":"unwatchTermination(of:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwatchTermination"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Watchee"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Watchee"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Watchee"}],"abstract":[],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch\/unwatchTermination(of:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster\/lifecyclewatch\/unwatchtermination(of:file:line:)"},"doc://DistributedCluster/documentation/DistributedCluster/Cluster/MemberStatus/down":{"role":"symbol","title":"Cluster.MemberStatus.down","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"down"}],"abstract":[{"type":"text","text":"Describes a member believed to be “down”, either by announcement by the member itself, another member,"},{"type":"text","text":" "},{"type":"text","text":"a human operator, or an automatic failure detector. It is important to note that it is not a 100% guarantee"},{"type":"text","text":" "},{"type":"text","text":"that the member\/node process really is not running anymore, as detecting this with full confidence is not possible"},{"type":"text","text":" "},{"type":"text","text":"in distributed systems. It can be said however, that with as much confidence as the failure detector, or whichever"},{"type":"text","text":" "},{"type":"text","text":"mechanism triggered the "},{"type":"codeVoice","code":".down"},{"type":"text","text":" that node may indeed be down, or perhaps unresponsive (or too-slow to respond)"},{"type":"text","text":" "},{"type":"text","text":"that it shall be assumed as-if dead anyway."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Cluster\/MemberStatus\/down","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster\/cluster\/memberstatus\/down"},"doc://DistributedCluster/documentation/DistributedCluster/Introduction":{"role":"article","title":"Introducing Distributed Actors","abstract":[{"type":"text","text":"A high-level introduction to distributed actor systems."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Introduction","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/introduction"},"doc://DistributedCluster/documentation/DistributedCluster/ClusterSystem/ActorID":{"role":"symbol","title":"ClusterSystem.ActorID","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorID"}],"abstract":[{"type":"text","text":"Uniquely identifies a DistributedActor within the cluster."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSystem\/ActorID","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActorID"}],"url":"\/documentation\/distributedcluster\/clustersystem\/actorid"},"doc://DistributedCluster/documentation/DistributedCluster/ClusterSystem":{"role":"symbol","title":"ClusterSystem","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClusterSystem"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ClusterSystem"},{"type":"text","text":" is a confined space which runs and manages Actors."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSystem","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ClusterSystem"}],"url":"\/documentation\/distributedcluster\/clustersystem"},"doc://DistributedCluster/documentation/DistributedCluster/Security":{"role":"article","title":"Security","abstract":[{"type":"text","text":"Configuring security aspects of your cluster system."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Security","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/security"},"doc://DistributedCluster/documentation/DistributedCluster/Clustering":{"role":"article","title":"Clustering","abstract":[{"type":"text","text":"Clustering multiple actor system instances into a single Distributed Actor System."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Clustering","kind":"article","type":"topic","url":"\/documentation\/distributedcluster\/clustering"},"doc://DistributedCluster/documentation/DistributedCluster/ClusterSingleton":{"role":"symbol","title":"ClusterSingleton","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClusterSingleton"}],"abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"cluster singleton"}]},{"type":"text","text":" is a conceptual distributed actor that is guaranteed to have at-most one"},{"type":"text","text":" "},{"type":"text","text":"instance within the cluster system among all of its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/Cluster\/MemberStatus\/up"},{"type":"text","text":" members."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSingleton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ClusterSingleton"}],"url":"\/documentation\/distributedcluster\/clustersingleton"},"doc://DistributedCluster/documentation/DistributedCluster/LifecycleWatch":{"role":"symbol","title":"LifecycleWatch","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LifecycleWatch"}],"abstract":[{"type":"text","text":"Provides a distributed actor with the ability to “watch” other actors lifecycles."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LifecycleWatch"}],"url":"\/documentation\/distributedcluster\/lifecyclewatch"},"doc://DistributedCluster/documentation/DistributedCluster/LifecycleWatch/terminated(actor:)":{"role":"symbol","title":"terminated(actor:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"terminated"},{"kind":"text","text":"("},{"kind":"externalParam","text":"actor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ActorID","preciseIdentifier":"s:18DistributedCluster7ActorIDa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Called with an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/ClusterSystem\/ActorID"},{"type":"text","text":" of a distributed actor that was previously"},{"type":"text","text":" "},{"type":"text","text":"watched using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch\/watchTermination(of:file:line:)"},{"type":"text","text":", and has now terminated."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch\/terminated(actor:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/distributedcluster\/lifecyclewatch\/terminated(actor:)"},"remote_watch_terminated.png":{"alt":"Diagram showing two nodes in a cluster, and a terminated signal being issued as the remote (watched) node crashes and is declared as ‘down’.","type":"image","identifier":"remote_watch_terminated.png","variants":[{"url":"\/images\/remote_watch_terminated.png","traits":["1x","light"]}]},"doc://DistributedCluster/documentation/DistributedCluster/LifecycleWatch/watchTermination(of:file:line:)":{"role":"symbol","title":"watchTermination(of:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"watchTermination"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Watchee"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Watchee"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Watchee"}],"abstract":[{"type":"text","text":"Watch the "},{"type":"codeVoice","code":"watchee"},{"type":"text","text":" actor for termination."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/LifecycleWatch\/watchTermination(of:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster\/lifecyclewatch\/watchtermination(of:file:line:)"}}}