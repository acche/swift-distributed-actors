{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DistributedActorContext"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Access must be carefully managed to only be performed from the actor itself, once the context has been initialized."},{"type":"text","text":" "},{"type":"text","text":"And also it is allowed to modify this state once the system receives it in the "},{"type":"codeVoice","code":"resignID"},{"type":"text","text":" (as the context is carried inside the ID),"},{"type":"text","text":" "},{"type":"text","text":"as at that point in time it can no longer be used–by the now deallocated–actor itself."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/distributedcluster\/distributedactorcontext"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/DistributedActorContext","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Internal context object used by the actor system to support per-actor state, such as necessary to implement lifecycle watch etc."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DistributedActorContext"}],"title":"DistributedActorContext","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:18DistributedCluster0A12ActorContextC","modules":[{"name":"DistributedCluster"}],"navigatorTitle":[{"kind":"identifier","text":"DistributedActorContext"}]},"hierarchy":{"paths":[["doc:\/\/DistributedCluster\/documentation\/DistributedCluster"]]},"references":{"doc://DistributedCluster/documentation/DistributedCluster":{"role":"collection","title":"DistributedCluster","abstract":[{"type":"text","text":"A peer-to-peer cluster actor system implementation for Swift."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster","kind":"symbol","type":"topic","url":"\/documentation\/distributedcluster"},"doc://DistributedCluster/documentation/DistributedCluster/DistributedActorContext":{"role":"symbol","title":"DistributedActorContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DistributedActorContext"}],"abstract":[{"type":"text","text":"Internal context object used by the actor system to support per-actor state, such as necessary to implement lifecycle watch etc."}],"identifier":"doc:\/\/DistributedCluster\/documentation\/DistributedCluster\/DistributedActorContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DistributedActorContext"}],"url":"\/documentation\/distributedcluster\/distributedactorcontext"}}}